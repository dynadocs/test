name: Build iperf3 x64 static via cygwin-cmd
on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: write

jobs:
  skip_duplicate_job:
    # continue-on-error: true # Uncomment once integration is finished
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v5
        with:
          concurrent_skipping: "always"
          cancel_others: "false"
          skip_after_successful_duplicate: false
          do_not_skip: ""

  check_release:
    # continue-on-error: true # Uncomment once integration is finished
    runs-on: ubuntu-latest
    needs: skip_duplicate_job
    steps:
      - name: Get latest esnet/iperf tag
        run: |
          cat > "upstream_iperf3_tag.sh" <<- UPSTREAM_IPERF3_TAG
          declare -A upstream_iperf3_tag
          upstream_iperf3_tag[iperf3]="$(git ls-remote -q -t --refs "https://github.com/esnet/iperf.git" | awk '{sub("refs/tags/", "");sub("(.*)(-|rc|iperf|trunk|3.1b1|3.1b2|3.1b3)(.*)", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n1)"
          UPSTREAM_IPERF3_TAG

      - name: Get latest userdocs/iperf3-static tag
        run: |
          cat > "local_iperf3_tag.sh" <<- LOCAL_IPERF3_TAG
          declare -A local_iperf3_tag
          local_iperf3_tag[iperf3]="$(git ls-remote -q -t --refs "https://github.com/userdocs/iperf3-static.git" | awk '{sub("refs/tags/", "");sub("(.*)(-|rc|iperf|trunk|3.1b1|3.1b2|3.1b3)(.*)", ""); print $2 }' | awk '!/^$/' | sort -rV | head -n1)"
          LOCAL_IPERF3_TAG

      - name: Test values - latest upstream vs local tags
        run: |
          source upstream_iperf3_tag.sh
          source local_iperf3_tag.sh

          ver() {
            local test_array
            read -ra test_array < <(printf "%s" "${@//./ }")
            printf "%d%03d%03d%03d" "${test_array[@]}"
          }

          for iray in "${!upstream_iperf3_tag[@]}"; do
            if [[ "$(ver "${upstream_iperf3_tag[$iray]}")" -gt "$(ver "${local_iperf3_tag[$iray]}")" ]]; then
              printf "%-14s latest:%-10s qbt-workflow-files:%-10s %s\n" "$iray" "${upstream_iperf3_tag[$iray]}" "${local_iperf3_tag[$iray]}" "< New version available - workflow will be triggered"
              echo "trigger_files_workflow=yes" >> $GITHUB_ENV
            else
              printf "%-14s latest:%-10s qbt-workflow-files:%-10s\n" "$iray" "${upstream_iperf3_tag[$iray]}" "${local_iperf3_tag[$iray]}"
              exit
            fi
          done

  build:
    runs-on: windows-latest
    needs: check_release
    strategy:
      fail-fast: false
      matrix:
        name: [iperf3]
        build: [basic, openssl]
        include:
          - build: "basic"
            filename: ""
            openssl: "no"
          - build: "openssl"
            filename: "openssl-"
            openssl: "yes"

    steps:
      - run: git config --global core.autocrlf input

      - name: Checkout
        uses: actions/checkout@v3

      - name: Move packages_${{ matrix.build }}.cmd to packages.cmd
        run: Copy-Item -Path packages_${{ matrix.build }}.cmd -Destination packages.cmd

      - name: Install cygwin-installer.cmd
        run: .\cygwin-installer.cmd

      - name: Build static
        run: |
          .\cygwin\bin\bash.exe -l build.sh ${{ matrix.openssl }}

      - name: Archive build
        run: Compress-Archive ${{ matrix.name }} ${{ matrix.name }}-amd64-${{ matrix.filename }}win.zip

      - name: Host - Bootstrap release tag
        run: echo "release_tag=$(Get-Content -Path iperf3_version)" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

      - name: "Create release"
        uses: ncipollo/release-action@v1
        with:
          prerelease: false
          artifacts: "${{ matrix.name }}-amd64-${{ matrix.filename }}win.zip"
          replacesArtifacts: true
          tag: ${{ env.release_tag }}
          name: ${{ matrix.name }} ${{ env.release_tag }}
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
